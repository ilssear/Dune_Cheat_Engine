<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>357</ID>
      <Description>"DEBUG (nothing of interest)"</Description>
      <Options moHideChildren="1" />
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>358</ID>
          <Description>"ent.Faction:update (nothing of interest, just some of your faction data)"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : D4X.exe
  Version: 
  Date   : 2022-06-10
  Author : doctor
  This script does blah blah blah
}

[ENABLE]
{$C NODEBUG}
#include &lt;ent.Faction..update.c&gt;

{$asm}
alloc(newmem,$1000,40000000)
newmem:
  reg(ent_Faction_update_patch)
  align 10
  hl_detour_method(ent.Faction:update)


[DISABLE]

hl_restore_method(ent.Faction:update)
unreg(*)

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT:
// ---------- INJECTING HERE ----------
// ---------- DONE INJECTING  ----------
}

					
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>359</ID>
              <Description>"dbg"</Description>
              <Options moHideChildren="1" />
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>360</ID>
                  <Description>"_this"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>8 Bytes</VariableType>
                  <Address>ent_Faction_update_dbg+00</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>361</ID>
                  <Description>"_arg1"</Description>
                  <ShowAsSigned>1</ShowAsSigned>
                  <VariableType>Double</VariableType>
                  <Address>ent_Faction_update_dbg+08</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>362</ID>
                  <Description>"_player"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>8 Bytes</VariableType>
                  <Address>ent_Faction_update_dbg+10</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>363</ID>
                  <Description>"_ai"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>8 Bytes</VariableType>
                  <Address>ent_Faction_update_dbg+18</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>364</ID>
                  <Description>"_currentHegemonyBonus"</Description>
                  <ShowAsSigned>1</ShowAsSigned>
                  <VariableType>4 Bytes</VariableType>
                  <Address>ent_Faction_update_dbg+20</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>365</ID>
          <Description>"ent.Structure:onSelect (nothing of interest, just shows some values in selected villages/buildings)"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : D4X.exe
  Version: 
  Date   : 2022-06-10
  Author : doctor
  This script does blah blah blah
}

[ENABLE]
{$C NODEBUG}
#include &lt;ent.Structure..onSelect.c&gt;

{$asm}
alloc(newmem,$1000,40000000)

newmem:
  reg(ent_Structure_onSelect_patch)
  align 10
  hl_detour_method(ent.Structure:onSelect)

[DISABLE]
hl_restore_method(ent.Structure:onSelect)
dealloc(newmem)
unreg(*)

{
// ORIGINAL CODE - INJECTION POINT: 
// ---------- INJECTING HERE ----------
// ---------- DONE INJECTING  ----------
}

					
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>366</ID>
              <Description>"dbg"</Description>
              <Options moHideChildren="1" />
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>367</ID>
                  <Description>"_this"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>8 Bytes</VariableType>
                  <Address>ent_Structure_onSelect_dbg+00</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>368</ID>
                  <Description>"_arg1"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>8 Bytes</VariableType>
                  <Address>ent_Structure_onSelect_dbg+08</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>369</ID>
                  <Description>"[E] _captureTime"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Double</VariableType>
                  <Address>[ent_Structure_onSelect_dbg+10]</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>370</ID>
                  <Description>"_siege"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>8 Bytes</VariableType>
                  <Address>ent_Structure_onSelect_dbg+18</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>371</ID>
                  <Description>"_besiegingFaction"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>8 Bytes</VariableType>
                  <Address>ent_Structure_onSelect_dbg+20</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>372</ID>
                  <Description>"[E] _siegeStartTime"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Double</VariableType>
                  <Address>[ent_Structure_onSelect_dbg+28]</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>373</ID>
                  <Description>"[E] _occupationStartTime"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Double</VariableType>
                  <Address>[ent_Structure_onSelect_dbg+30]</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>374</ID>
                  <Description>"_cntEx"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>8 Bytes</VariableType>
                  <Address>ent_Structure_onSelect_dbg+38</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>19</ID>
          <Description>"FindTypes"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>
{
  Game   : DX4.exe
  Version: 2.0.7.31918
  Date   : 2024-07-18
  Author : ilssear
  This script gets Types 
}

[ENABLE]

{$lua}
if syntaxcheck then return end
unregisterSymbol("hlTypesBegin")
printf("%s activate ...", memrec.Description)

local function ExecFindTypes()
  local fnName = "hlFindTypes"
  local fnAddr = getAddressSafe(fnName)

  if not fnAddr then printf("Can't resolve address of %s", fnName) return end
  printf("Executing %s (0x%012X)", fnName, fnAddr)
  local res = executeCode(fnAddr, 0, 30 * 60 * 1000)

  printf("Returned from %s with result: 0x%012X", fnName, res or 0)

  if res &gt; 0x10000 and (res &lt; 0x7FFF00000000) then
    local r = {
      pBegin = readPointer(res + 0x00),
      pBaseAddr = readPointer(res + 0x08),
      pAllocAddr = readPointer(res + 0x10),
      nRegionsScanned = readPointer(res + 0x18),
      nScans = readPointer(res + 0x20),
      nQwTotal = readPointer(res + 0x28),
      pErrRegionBase = readPointer(res + 0x30),
      errCode = readInteger(res + 0x38),
    }

    if r.pBegin and (r.pBegin &gt; 0) then
      registerSymbol("hlTypesBegin", r.pBegin)
      printf("registerSymbol(\"hlTypesBegin\", 0x%012X)", r.pBegin)
    end

    printf("r = %s", require("serpent").block(r, { numformat = "0x%012X" }))

    return r
  else
    print("%s failed to find type definitions: %s", fnName, res)
  end
end

local function onActivate(mr, before, curState)
  local d = mr.Description

  if before then
    printf("onActivate(%s, before, %s)", d, curState)
    return true
  else
    printf("onActivate(%s, after, %s)", d, curState)
    if not curState then return end
    ExecFindTypes()
  end
end

if not syntaxcheck then
  memrec.OnActivate = onActivate
end

local code = "{" .. "$" .. [==[c NODEBUG}
#include &lt;FindTypes.c&gt;
{]==] .. [==[$asm}
]==]
return code

{$asm}


[DISABLE]
{$lua}
if syntaxcheck then return end

unregisterSymbol("hlTypesBegin")
printf("%s deactivate...", memrec.Description)
unreg(*)

{$asm}

					
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>hlTypesBegin</Name>
      <Address>13B46510098</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ent_Faction_isAI</Name>
      <Address>358</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  </CheatTable>